# -*- codeing = utf-8 -*-
# @Time : 2020/5/18 11:21
# @Author : liuyi
# @File : v5_side.py
# @Software : PyCharm
# 6.12改进了学习算法

# 路径有随机性，主要是之前采取选择下一步的策略是：有多个最大值时随机选择，现改为选第一个
# 注意：存图拐着的，大部分是-1，存图左右端点的，大部分是0
# 换矩阵要改两个地方，一个main（）里的r，一个在findpath里的LAR矩阵
# 要不要在学习过程中加入区分两边的机制
# 在学习阶段探索到没路了怎么办

import numpy as np
import random
import time
np.set_printoptions(threshold=1e6)


# 单边六边形图
def initiaR():
    r = np.ones((42, 42), dtype=np.float32)
    r = r * (-1)
    r[0,3] = 1
    r[0,4] = 1
    r[1,5] = 1
    r[1,6] = 1
    r[2,7] = 1
    r[2,8] = 1
    r[3,0] = 1
    r[3,4] = 1

    r[4,0] = 1
    r[4,3] = 1
    r[4,5] = 1
    r[4,9] = 1

    r[5,1] = 1
    r[5,6] = 1
    r[5,4] = 1
    r[5,9] = 1

    r[6,1] = 1
    r[6,5] = 1
    r[6,7] = 1
    r[6,10] = 1

    r[7,2] = 1
    r[7,6] = 1
    r[7,8] = 1
    r[7,10] = 1

    r[8,2] = 1
    r[8,7] = 1
    r[8,11] = 1

    r[9,4] = 1
    r[9,5] = 1
    r[9,13] = 1
    r[9,14] = 1

    r[10,6] = 1
    r[10,7] = 1
    r[10,15] = 1
    r[10,16] = 1

    r[11,8] = 1
    r[11,17] = 1
    r[11,18] = 1

    r[12,13] = 1
    r[12,19] = 1

    r[13,9] = 1
    r[13,12] = 1
    r[13,14] = 1
    r[13,19] = 1

    r[14,9] = 1
    r[14,13] = 1
    r[14,15] = 1
    r[14,20] = 1

    r[15,10] = 1
    r[15,14] = 1
    r[15,16] = 1
    r[15,20] = 1

    r[16,10] = 1
    r[16,15] = 1
    r[16,17] = 1
    r[16,21] = 1

    r[17,11] = 1
    r[17,16] = 1
    r[17,18] = 1
    r[17,21] = 1

    r[18,11] = 1
    r[18,17] = 1
    r[18,22] = 1

    r[19,12] = 1
    r[19,13] = 1
    r[19,23] = 1
    r[19,24] = 1

    r[20,14] = 1
    r[20,15] = 1
    r[20,25] = 1
    r[20,26] = 1

    r[21,16] = 1
    r[21,17] = 1
    r[21,27] = 1
    r[21,28] = 1

    r[22,18] = 1
    r[22,29] = 1

    r[23,19] = 1
    r[23,24] = 1

    r[24,19] = 1
    r[24,23] = 1
    r[24,25] = 1
    r[24,30] = 1

    r[25,20] = 1
    r[25,24] = 1
    r[25,26] = 1
    r[25,30] = 1

    r[26,20] = 1
    r[26,25] = 1
    r[26,27] = 1
    r[26,31] = 1

    r[27,21] = 1
    r[27,26] = 1
    r[27,28] = 1
    r[27,31] = 1

    r[28,21] = 1
    r[28,27] = 1
    r[28,29] = 1
    r[28,32] = 1

    r[29,22] = 1
    r[29,28] = 1
    r[29,32] = 1

    r[30,24] = 1
    r[30,25] = 1
    r[30,34] = 1
    r[30,35] = 1

    r[31,26] = 1
    r[31,27] = 1
    r[31,36] = 1
    r[31,37] = 1

    r[32,28] = 1
    r[32,29] = 1
    r[32,38] = 1

    r[33,34] = 1
    r[33,39] = 1

    r[34,30] = 1
    r[34,33] = 1
    r[34,35] = 1
    r[34,39] = 1

    r[35,30] = 1
    r[35,34] = 1
    r[35,36] = 1
    r[35,40] = 1

    r[36,31] = 1
    r[36,35] = 1
    r[36,37] = 1
    r[36,40] = 1

    r[37,31] = 1
    r[37,36] = 1
    r[37,38] = 1
    r[37,41] = 1

    r[38,32] = 1
    r[38,37] = 1
    r[38,41] = 1

    r[39,33] = 1
    r[39,34] = 1

    r[40,35] = 1
    r[40,36] = 1

    r[41,37] = 1
    r[41,38] = 1

    return r


#实验六边形双边图
def initiaR2():
    r = np.ones((30, 30), dtype=np.float32)
    r = r * (-1)

    r[0,1] = 1
    r[0,5] = 1
    r[0,4] = 0.8
    r[0,8] = 1
    r[0,9] = 1

    r[4,1] = 1
    r[4,5] = 1
    r[4,0] = 0.8
    r[4,8] = 1
    r[4,9] = 1

    r[1,2] = 1
    r[1,6] = 1
    r[1,11] = 1
    r[1,10] = 1
    r[1,5] = 0.8
    r[1,0] = 1
    r[1,4] = 1

    r[5,2] = 1
    r[5,6] = 1
    r[5,11] = 1
    r[5,10] = 1
    r[5,5] = 0.8
    r[5,0] = 1
    r[5,4] = 1

    r[2,3] = 1
    r[2,7] = 1
    r[2,6] = 0.8
    r[2,1] = 1
    r[2,5] = 1
    r[2,10] = 1
    r[2,11] = 1

    r[6,3] = 1
    r[6,7] = 1
    r[6,6] = 0.8
    r[6,1] = 1
    r[6,5] = 1
    r[6,10] = 1
    r[6,11] = 1

    r[3,13] = 1
    r[3,12] = 1
    r[3,7] = 0.8
    r[3,2] = 1
    r[3,6] = 1

    r[7,13] = 1
    r[7,12] = 1
    r[7,3] = 0.8
    r[7,2] = 1
    r[7,6] = 1

    r[8,0] = 1
    r[8,4] = 1
    r[8,9] = 0.8
    r[8,14] = 1
    r[8,18] = 1

    r[9,0] = 1
    r[9,4] = 1
    r[9,8] = 0.8
    r[9,14] = 1
    r[9,18] = 1

    r[10,1] = 1
    r[10,5] = 1
    r[10,11] = 0.8
    r[10,2] = 1
    r[10,6] = 1
    r[10,15] = 1
    r[10,19] = 1
    r[10,16] = 1
    r[10,20] = 1


    r[11,1] = 1
    r[11,5] = 1
    r[11,10] = 0.8
    r[11,2] = 1
    r[11,6] = 1
    r[11,15] = 1
    r[11,19] = 1
    r[11,16] = 1
    r[11,20] = 1

    r[12,3] = 1
    r[12,7] = 1
    r[12,13] = 0.8
    r[12,17] = 1
    r[12,21] = 1

    r[13,3] = 1
    r[13,7] = 1
    r[13,12] = 0.8
    r[13,17] = 1
    r[13,21] = 1

    r[14,8] = 1
    r[14,9] = 1
    r[14,18] = 0.8
    r[14,15] = 1
    r[14,19] = 1
    r[14,22] = 1
    r[14,23] = 1

    r[18,8] = 1
    r[18,9] = 1
    r[18,14] = 0.8
    r[18,15] = 1
    r[18,19] = 1
    r[18,22] = 1
    r[18,23] = 1

    r[15,10] = 1
    r[15,11] = 1
    r[15,16] = 1
    r[15,20] = 1
    r[15,19] = 0.8
    r[15,14] = 1
    r[15,18] = 1
    r[15,22] = 1
    r[15,23] = 1

    r[19,10] = 1
    r[19,11] = 1
    r[19,16] = 1
    r[19,20] = 1
    r[19,15] = 0.8
    r[19,14] = 1
    r[19,18] = 1
    r[19,22] = 1
    r[19,23] = 1

    r[16,10] = 1
    r[16,11] = 1
    r[16,15] = 1
    r[16,19] = 1
    r[16,20] = 0.8
    r[16,17] = 1
    r[16,21] = 1
    r[16,24] = 1
    r[16,25] = 1

    r[20,10] = 1
    r[20,11] = 1
    r[20,15] = 1
    r[20,19] = 1
    r[20,16] = 0.8
    r[20,17] = 1
    r[20,21] = 1
    r[20,24] = 1
    r[20,25] = 1

    r[17,12] = 1
    r[17,13] = 1
    r[17,21] = 0.8
    r[17,16] = 1
    r[17,20] = 1
    r[17,24] = 1
    r[17,25] = 1

    r[21, 12] = 1
    r[21, 13] = 1
    r[21, 17] = 0.8
    r[21, 16] = 1
    r[21, 20] = 1
    r[21, 24] = 1
    r[21, 25] = 1

    r[22,14] = 1
    r[22,18] = 1
    r[22,15] = 1
    r[22,19] = 1
    r[22,23] = 0.8
    r[22,26] = 1
    r[22,28] = 1

    r[23,14] = 1
    r[23,18] = 1
    r[23,15] = 1
    r[23,19] = 1
    r[23,22] = 0.8
    r[23,26] = 1
    r[23,28] = 1

    r[24,16] = 1
    r[24,20] = 1
    r[24,17] = 1
    r[24,21] = 1
    r[24,25] = 0.8
    r[24,27] = 1
    r[24,29] = 1

    r[25,16] = 1
    r[25,20] = 1
    r[25,17] = 1
    r[25,21] = 1
    r[25,24] = 0.8
    r[25,27] = 1
    r[25,29] = 1

    r[26,22] = 1
    r[26,23] = 1
    r[26,28] = 0.8
    r[26,27] = 1
    r[26,29] = 1

    r[28,22] = 1
    r[28,23] = 1
    r[28,26] = 0.8
    r[28,27] = 1
    r[28,29] = 1

    r[27,24] = 1
    r[27,25] = 1
    r[27,29] = 0.8
    r[27,26] = 1
    r[27,28] = 1

    r[29,24] = 1
    r[29,25] = 1
    r[29,27] = 0.8
    r[29,26] = 1
    r[29,28] = 1

    return r


#实验六边形双边图,加入了少拐着
def initiaR3():
    r = np.ones((30, 30), dtype=np.float32)
    r = r * (-1)

    r[0,1] = 1
    r[0,5] = 0.8
    r[0,4] = 0.6
    r[0,8] = 1
    r[0,9] = 0.8

    r[4,1] = 1
    r[4,5] = 0.8
    r[4,0] = 0.6
    r[4,8] = 1
    r[4,9] = 0.8

    r[1,2] = 0.8
    r[1,6] = 1
    r[1,11] = 1
    r[1,10] = 0.8
    r[1,5] = 0.6
    r[1,0] = 1
    r[1,4] = 0.8

    r[5,2] = 0.8
    r[5,6] = 1
    r[5,11] = 1
    r[5,10] = 0.8
    r[5,1] = 0.6
    r[5,0] = 1
    r[5,4] = 0.8

    r[2,3] = 1
    r[2,7] = 0.8
    r[2,6] = 0.6
    r[2,1] = 0.8
    r[2,5] = 1
    r[2,10] = 1
    r[2,11] = 0.8

    r[6,3] = 1
    r[6,7] = 0.8
    r[6,2] = 0.6
    r[6,1] = 0.8
    r[6,5] = 1
    r[6,10] = 1
    r[6,11] = 0.8

    r[3,13] = 1
    r[3,12] = 0.8
    r[3,7] = 0.6
    r[3,2] = 1
    r[3,6] = 0.8

    r[7,13] = 1
    r[7,12] = 0.8
    r[7,3] = 0.6
    r[7,2] = 1
    r[7,6] = 0.8

    r[8,0] = 1
    r[8,4] = 0.8
    r[8,9] = 0.6
    r[8,14] = 0.8
    r[8,18] = 1

    r[9,0] = 1
    r[9,4] = 0.8
    r[9,8] = 0.6
    r[9,14] = 0.8
    r[9,18] = 1

    r[10,1] = 1
    r[10,5] = 0.8
    r[10,11] = 0.6
    r[10,2] = 1
    r[10,6] = 0.8
    r[10,15] = 0.8
    r[10,19] = 1
    r[10,16] = 0.8
    r[10,20] = 1

    r[11,1] = 1
    r[11,5] = 0.8
    r[11,10] = 0.6
    r[11,2] = 1
    r[11,6] = 0.8
    r[11,15] = 0.8
    r[11,19] = 1
    r[11,16] = 0.8
    r[11,20] = 1

    r[12,3] = 1
    r[12,7] = 0.8
    r[12,13] = 0.6
    r[12,17] = 0.8
    r[12,21] = 1

    r[13,3] = 1
    r[13,7] = 0.8
    r[13,12] = 0.6
    r[13,17] = 0.8
    r[13,21] = 1

    r[14,8] = 1
    r[14,9] = 0.8
    r[14,18] = 0.6
    r[14,15] = 0.8
    r[14,19] = 1
    r[14,22] = 0.8
    r[14,23] = 1

    r[18,8] = 1
    r[18,9] = 0.8
    r[18,14] = 0.6
    r[18,15] = 0.8
    r[18,19] = 1
    r[18,22] = 0.8
    r[18,23] = 1

    r[15,10] = 0.8
    r[15,11] = 1
    r[15,16] = 1
    r[15,20] = 0.8
    r[15,19] = 0.6
    r[15,14] = 0.8
    r[15,18] = 1
    r[15,22] = 1
    r[15,23] = 0.8

    r[19,10] = 0.8
    r[19,11] = 1
    r[19,16] = 1
    r[19,20] = 0.8
    r[19,15] = 0.6
    r[19,14] = 0.8
    r[19,18] = 1
    r[19,22] = 1
    r[19,23] = 0.8

    r[16,10] = 1
    r[16,11] = 0.8
    r[16,15] = 1
    r[16,19] = 0.8
    r[16,20] = 0.6
    r[16,17] = 0.8
    r[16,21] = 1
    r[16,24] = 0.8
    r[16,25] = 1

    r[20,10] = 1
    r[20,11] = 0.8
    r[20,15] = 1
    r[20,19] = 0.8
    r[20,16] = 0.6
    r[20,17] = 0.8
    r[20,21] = 1
    r[20,24] = 0.8
    r[20,25] = 1

    r[17,12] = 0.8
    r[17,13] = 1
    r[17,21] = 0.6
    r[17,16] = 0.8
    r[17,20] = 1
    r[17,24] = 1
    r[17,25] = 0.8

    r[21, 12] = 0.8
    r[21, 13] = 1
    r[21, 17] = 0.6
    r[21, 16] = 0.8
    r[21, 20] = 1
    r[21, 24] = 1
    r[21, 25] = 0.8

    r[22,14] = 1
    r[22,18] = 0.8
    r[22,15] = 1
    r[22,19] = 0.8
    r[22,23] = 0.6
    r[22,26] = 0.8
    r[22,28] = 1

    r[23,14] = 1
    r[23,18] = 0.8
    r[23,15] = 1
    r[23,19] = 0.8
    r[23,22] = 0.6
    r[23,26] = 0.8
    r[23,28] = 1

    r[24,16] = 1
    r[24,20] = 0.8
    r[24,17] = 1
    r[24,21] = 0.8
    r[24,25] = 0.6
    r[24,27] = 0.8
    r[24,29] = 1

    r[25,16] = 1
    r[25,20] = 0.8
    r[25,17] = 1
    r[25,21] = 0.8
    r[25,24] = 0.6
    r[25,27] = 0.8
    r[25,29] = 1

    r[26,22] = 1
    r[26,23] = 0.8
    r[26,28] = 0.6
    r[26,27] = 0.8
    r[26,29] = 1

    r[28,22] = 1
    r[28,23] = 0.8
    r[28,26] = 0.6
    r[28,27] = 0.8
    r[28,29] = 1

    r[27,24] = 0.8
    r[27,25] = 1
    r[27,29] = 0.6
    r[27,26] = 0.8
    r[27,28] = 1

    r[29,24] = 0.8
    r[29,25] = 1
    r[29,27] = 0.6
    r[29,26] = 0.8
    r[29,28] = 1

    return r


# 左-1右1，上-1下1
def LAR_initiaR3():
    r = np.ones((30, 30), dtype=np.float32)

    r[0, 1] = 1
    r[0, 5] = 1
    r[0, 4] = 0
    r[0, 8] = -1
    r[0, 9] = -1

    r[4, 1] = 1
    r[4, 5] = 1
    r[4, 0] = 0
    r[4, 8] = -1
    r[4, 9] = -1

    r[1, 2] = 1
    r[1, 6] = 1
    r[1, 11] = 1
    r[1, 10] = 1
    r[1, 5] = 0
    r[1, 0] = -1
    r[1, 4] = -1

    r[5, 2] = 1
    r[5, 6] = 1
    r[5, 11] = 1
    r[5, 10] = 1
    r[5, 1] = 0
    r[5, 0] = -1
    r[5, 4] = -1

    r[2, 3] = 1
    r[2, 7] = 1
    r[2, 6] = 0
    r[2, 1] = -1
    r[2, 5] = -1
    r[2, 10] = -1
    r[2, 11] = -1

    r[6, 3] = 1
    r[6, 7] = 1
    r[6, 2] = 0
    r[6, 1] = -1
    r[6, 5] = -1
    r[6, 10] = -1
    r[6, 11] = -1

    r[3, 13] = 1
    r[3, 12] = 1
    r[3, 7] = 0
    r[3, 2] = -1
    r[3, 6] = -1

    r[7, 13] = 1
    r[7, 12] = 1
    r[7, 3] = 0
    r[7, 2] = -1
    r[7, 6] = -1

    r[8, 0] = -1
    r[8, 4] = -1
    r[8, 9] = 0
    r[8, 14] = 1
    r[8, 18] = 1

    r[9, 0] = -1
    r[9, 4] = -1
    r[9, 8] = 0
    r[9, 14] = 1
    r[9, 18] = 1

    r[10, 1] = -1
    r[10, 5] = -1
    r[10, 2] = -1
    r[10, 6] = -1
    r[10, 11] = 0
    r[10, 15] = 1
    r[10, 19] = 1
    r[10, 16] = 1
    r[10, 20] = 1

    r[11, 1] = -1
    r[11, 5] = -1
    r[11, 2] = -1
    r[11, 6] = -1
    r[11, 11] = 0
    r[11, 15] = 1
    r[11, 19] = 1
    r[11, 16] = 1
    r[11, 20] = 1

    r[12, 3] = -1
    r[12, 7] = -1
    r[12, 13] = 0
    r[12, 17] = 1
    r[12, 21] = 1

    r[13, 3] = -1
    r[13, 7] = -1
    r[13, 12] = 0
    r[13, 17] = 1
    r[13, 21] = 1

    r[14, 8] = -1
    r[14, 9] = -1
    r[14, 18] = 0
    r[14, 15] = 1
    r[14, 19] = 1
    r[14, 22] = 1
    r[14, 23] = 1

    r[18, 8] = -1
    r[18, 9] = -1
    r[18, 18] = 0
    r[18, 15] = 1
    r[18, 19] = 1
    r[18, 22] = 1
    r[18, 23] = 1

    r[15, 10] = 1
    r[15, 11] = 1
    r[15, 16] = 1
    r[15, 20] = 1
    r[15, 19] = 0
    r[15, 14] = -1
    r[15, 18] = -1
    r[15, 22] = -1
    r[15, 23] = -1

    r[19, 10] = 1
    r[19, 11] = 1
    r[19, 16] = 1
    r[19, 20] = 1
    r[19, 19] = 0
    r[19, 14] = -1
    r[19, 18] = -1
    r[19, 22] = -1
    r[19, 23] = -1

    r[16, 10] = 1
    r[16, 11] = 1
    r[16, 15] = 1
    r[16, 19] = 1
    r[16, 20] = 0
    r[16, 17] = -1
    r[16, 21] = -1
    r[16, 24] = -1
    r[16, 25] = -1

    r[20, 10] = 1
    r[20, 11] = 1
    r[20, 15] = 1
    r[20, 19] = 1
    r[20, 20] = 0
    r[20, 17] = -1
    r[20, 21] = -1
    r[20, 24] = -1
    r[20, 25] = -1

    r[17, 12] = -1
    r[17, 13] = -1
    r[17, 21] = 0
    r[17, 16] = 1
    r[17, 20] = 1
    r[17, 24] = 1
    r[17, 25] = 1

    r[21, 12] = -1
    r[21, 13] = -1
    r[21, 17] = 0
    r[21, 16] = 1
    r[21, 20] = 1
    r[21, 24] = 1
    r[21, 25] = 1

    r[22, 14] = -1
    r[22, 18] = -1
    r[22, 15] = -1
    r[22, 19] = -1
    r[22, 23] = 0
    r[22, 26] = 1
    r[22, 28] = 1

    r[23, 14] = -1
    r[23, 18] = -1
    r[23, 15] = -1
    r[23, 19] = -1
    r[23, 22] = 0
    r[23, 26] = 1
    r[23, 28] = 1

    r[24, 16] = -1
    r[24, 20] = -1
    r[24, 17] = -1
    r[24, 21] = -1
    r[24, 25] = 0
    r[24, 27] = 1
    r[24, 29] = 1

    r[25, 16] = -1
    r[25, 20] = -1
    r[25, 17] = -1
    r[25, 21] = -1
    r[25, 24] = 0
    r[25, 27] = 1
    r[25, 29] = 1

    r[26, 22] = -1
    r[26, 23] = -1
    r[26, 28] = 0
    r[26, 27] = 1
    r[26, 29] = 1

    r[28, 22] = -1
    r[28, 23] = -1
    r[28, 26] = 0
    r[28, 27] = 1
    r[28, 29] = 1

    r[27, 24] = -1
    r[27, 25] = -1
    r[27, 29] = 0
    r[27, 26] = 1
    r[27, 28] = 1

    r[29, 24] = -1
    r[29, 25] = -1
    r[29, 27] = 0
    r[29, 26] = 1
    r[29, 28] = 1

    return r


#实验六边形双边图，联通全1
def initiaR4():
    r = np.ones((30, 30), dtype=np.float32)
    r = r * (-1)

    r[0,1] = 1
    r[0,5] = 1
    r[0,4] = 1
    r[0,8] = 1
    r[0,9] = 1

    r[4,1] = 1
    r[4,5] = 1
    r[4,0] = 1
    r[4,8] = 1
    r[4,9] = 1

    r[1,2] = 1
    r[1,6] = 1
    r[1,11] = 1
    r[1,10] = 1
    r[1,5] = 1
    r[1,0] = 1
    r[1,4] = 1

    r[5,2] = 1
    r[5,6] = 1
    r[5,11] = 1
    r[5,10] = 1
    r[5,5] = 1
    r[5,0] = 1
    r[5,4] = 1

    r[2,3] = 1
    r[2,7] = 1
    r[2,6] = 1
    r[2,1] = 1
    r[2,5] = 1
    r[2,10] = 1
    r[2,11] = 1

    r[6,3] = 1
    r[6,7] = 1
    r[6,6] = 1
    r[6,1] = 1
    r[6,5] = 1
    r[6,10] = 1
    r[6,11] = 1

    r[3,13] = 1
    r[3,12] = 1
    r[3,7] = 1
    r[3,2] = 1
    r[3,6] = 1

    r[7,13] = 1
    r[7,12] = 1
    r[7,3] = 1
    r[7,2] = 1
    r[7,6] = 1

    r[8,0] = 1
    r[8,4] = 1
    r[8,9] = 1
    r[8,14] = 1
    r[8,18] = 1

    r[9,0] = 1
    r[9,4] = 1
    r[9,8] = 1
    r[9,14] = 1
    r[9,18] = 1

    r[10,1] = 1
    r[10,5] = 1
    r[10,11] = 1
    r[10,2] = 1
    r[10,6] = 1
    r[10,15] = 1
    r[10,19] = 1
    r[10,16] = 1
    r[10,20] = 1


    r[11,1] = 1
    r[11,5] = 1
    r[11,10] = 1
    r[11,2] = 1
    r[11,6] = 1
    r[11,15] = 1
    r[11,19] = 1
    r[11,16] = 1
    r[11,20] = 1

    r[12,3] = 1
    r[12,7] = 1
    r[12,13] = 1
    r[12,17] = 1
    r[12,21] = 1

    r[13,3] = 1
    r[13,7] = 1
    r[13,12] = 1
    r[13,17] = 1
    r[13,21] = 1

    r[14,8] = 1
    r[14,9] = 1
    r[14,18] = 1
    r[14,15] = 1
    r[14,19] = 1
    r[14,22] = 1
    r[14,23] = 1

    r[18,8] = 1
    r[18,9] = 1
    r[18,14] = 1
    r[18,15] = 1
    r[18,19] = 1
    r[18,22] = 1
    r[18,23] = 1

    r[15,10] = 1
    r[15,11] = 1
    r[15,16] = 1
    r[15,20] = 1
    r[15,19] = 1
    r[15,14] = 1
    r[15,18] = 1
    r[15,22] = 1
    r[15,23] = 1

    r[19,10] = 1
    r[19,11] = 1
    r[19,16] = 1
    r[19,20] = 1
    r[19,15] = 1
    r[19,14] = 1
    r[19,18] = 1
    r[19,22] = 1
    r[19,23] = 1

    r[16,10] = 1
    r[16,11] = 1
    r[16,15] = 1
    r[16,19] = 1
    r[16,20] = 1
    r[16,17] = 1
    r[16,21] = 1
    r[16,24] = 1
    r[16,25] = 1

    r[20,10] = 1
    r[20,11] = 1
    r[20,15] = 1
    r[20,19] = 1
    r[20,16] = 1
    r[20,17] = 1
    r[20,21] = 1
    r[20,24] = 1
    r[20,25] = 1

    r[17,12] = 1
    r[17,13] = 1
    r[17,21] = 1
    r[17,16] = 1
    r[17,20] = 1
    r[17,24] = 1
    r[17,25] = 1

    r[21, 12] = 1
    r[21, 13] = 1
    r[21, 17] = 1
    r[21, 16] = 1
    r[21, 20] = 1
    r[21, 24] = 1
    r[21, 25] = 1

    r[22,14] = 1
    r[22,18] = 1
    r[22,15] = 1
    r[22,19] = 1
    r[22,23] = 1
    r[22,26] = 1
    r[22,28] = 1

    r[23,14] = 1
    r[23,18] = 1
    r[23,15] = 1
    r[23,19] = 1
    r[23,22] = 1
    r[23,26] = 1
    r[23,28] = 1

    r[24,16] = 1
    r[24,20] = 1
    r[24,17] = 1
    r[24,21] = 1
    r[24,25] = 1
    r[24,27] = 1
    r[24,29] = 1

    r[25,16] = 1
    r[25,20] = 1
    r[25,17] = 1
    r[25,21] = 1
    r[25,24] = 1
    r[25,27] = 1
    r[25,29] = 1

    r[26,22] = 1
    r[26,23] = 1
    r[26,28] = 1
    r[26,27] = 1
    r[26,29] = 1

    r[28,22] = 1
    r[28,23] = 1
    r[28,26] = 1
    r[28,27] = 1
    r[28,29] = 1

    r[27,24] = 1
    r[27,25] = 1
    r[27,29] = 1
    r[27,26] = 1
    r[27,28] = 1

    r[29,24] = 1
    r[29,25] = 1
    r[29,27] = 1
    r[29,26] = 1
    r[29,28] = 1

    return r


#参考论文的图
def initiaR5():
    r = np.ones((44, 44), dtype=np.float32)
    r = r * (-1)
    r[0, 1] = 1
    r[0, 4] = 1
    r[1, 0] = 1
    r[1, 5] = 1
    r[2, 3] = 1
    r[2, 6] = 1
    r[3, 2] = 1
    r[3, 7] = 1
    r[4, 0] = 1
    r[4, 11] = 1

    r[5, 1] = 0.8
    r[5, 8] = 0.8
    r[5, 9] = 0.5
    r[5, 13] = 1

    r[6, 2] = 0.8
    r[6, 9] = 0.5
    r[6, 10] = 0.8
    r[6, 14] = 1

    r[7, 3] = 1
    r[7, 16] = 1

    r[8, 5] = 0.8
    r[8, 9] = 0.5
    r[8, 12] = 0.8
    r[8, 13] = 0.8

    r[9, 5] = 0.8
    r[9, 6] = 0.8
    r[9, 8] = 1
    r[9, 10] = 1
    r[9, 13] = 0.8
    r[9, 14] = 0.8

    r[10, 6] = 0.8
    r[10, 9] = 0.5
    r[10, 14] = 0.8
    r[10, 15] = 0.8

    r[11, 4] = 1
    r[11, 17] = 1

    r[12, 8] = 0.8
    r[12, 17] = 0.8
    r[12, 18] = 0.8
    r[12, 21] = 0.5

    r[13, 5] = 1
    r[13, 8] = 0.8
    r[13, 9] = 0.5
    r[13, 18] = 0.8

    r[14, 6] = 1
    r[14, 9] = 0.5
    r[14, 10] = 0.8
    r[14, 19] = 0.8

    r[15, 10] = 0.8
    r[15, 19] = 0.8
    r[15, 20] = 0.8
    r[15, 22] = 0.5

    r[16, 7] = 1
    r[16, 20] = 1

    r[17, 11] = 0.8
    r[17, 12] = 0.8
    r[17, 18] = 1
    r[17, 21] = 0.5

    r[18, 12] = 0.8
    r[18, 13] = 0.8
    r[18, 17] = 1
    r[18, 21] = 0.5

    r[19, 14] = 0.8
    r[19, 15] = 0.8
    r[19, 20] = 1
    r[19, 22] = 0.5

    r[20, 15] = 0.8
    r[20, 16] = 0.8
    r[20, 19] = 1
    r[20, 22] = 0.5

    r[21, 12] = 1
    r[21, 17] = 0.8
    r[21, 18] = 0.8
    r[21, 23] = 0.8
    r[21, 24] = 0.8
    r[21, 28] = 1

    r[22, 15] = 1
    r[22, 19] = 0.8
    r[22, 20] = 0.8
    r[22, 25] = 0.8
    r[22, 26] = 0.8
    r[22, 31] = 1

    r[23, 21] = 0.5
    r[23, 24] = 1
    r[23, 27] = 0.8
    r[23, 28] = 0.8

    r[24, 21] = 0.5
    r[24, 23] = 1
    r[24, 28] = 0.8
    r[24, 29] = 0.8

    r[25, 22] = 0.5
    r[25, 26] = 1
    r[25, 30] = 0.8
    r[25, 31] = 0.8

    r[26, 22] = 0.5
    r[26, 25] = 1
    r[26, 31] = 0.8
    r[26, 32] = 0.8

    r[27, 23] = 1
    r[27, 36] = 1

    r[28, 21] = 0.5
    r[28, 23] = 0.8
    r[28, 24] = 0.8
    r[28, 33] = 0.8

    r[29, 24] = 0.8
    r[29, 33] = 0.8
    r[29, 34] = 0.5
    r[29, 37] = 1

    r[30, 25] = 0.8
    r[30, 34] = 0.5
    r[30, 35] = 0.8
    r[30, 38] = 1

    r[31, 22] = 0.5
    r[31, 25] = 0.8
    r[31, 26] = 0.8
    r[31, 35] = 0.8

    r[32, 26] = 1
    r[32, 39] = 1

    r[33, 28] = 0.8
    r[33, 29] = 0.8
    r[33, 34] = 0.5
    r[33, 37] = 0.8

    r[34, 29] = 0.8
    r[34, 33] = 1
    r[34, 37] = 0.8
    r[34, 30] = 0.8
    r[34, 35] = 1
    r[34, 38] = 0.8

    r[35, 30] = 0.8
    r[35, 31] = 0.8
    r[35, 34] = 0.5
    r[35, 38] = 0.8

    r[36, 27] = 1
    r[36, 40] = 1

    r[37, 29] = 1
    r[37, 33] = 0.8
    r[37, 34] = 0.5
    r[37, 41] = 0.8

    r[38, 30] = 1
    r[38, 34] = 0.5
    r[38, 35] = 0.8
    r[38, 42] = 0.8

    r[39, 32] = 1
    r[39, 43] = 1
    r[40, 36] = 1
    r[40, 41] = 1
    r[41, 40] = 1
    r[41, 37] = 1
    r[42, 38] = 1
    r[42, 43] = 1
    r[43, 39] = 1
    r[43, 42] = 1

    return r


def cube_triangle():
    r = np.ones((58, 58), dtype=np.float32)
    r = r * (-1)
    r[0, 1] = 0.5
    r[0, 2] = 0.3

    r[1, 0] = 0.5
    r[1, 3] = 0.66

    r[2, 0] = 0.3
    r[2, 3] = 0.3
    r[2, 14] = 0.66
    r[2, 16] = 1
    r[2, 18] = 0.66
    r[2, 17] = 0.3

    r[3, 1] = 0.66
    r[3, 2] = 0.3
    r[3, 17] = 0.66
    r[3, 18] = 1
    r[3, 16] = 0.66
    r[3, 14] = 0.3

    r[4, 5] = 0.3
    r[4, 6] = 0.3

    r[5, 4] = 0.3
    r[5, 6] = .3
    r[5, 20] = 0.66
    r[5, 21] = 1
    r[5, 19] = 0.66
    r[5, 17] = 0.3

    r[6, 4] = 0.3
    r[6, 5] = 0.3
    r[6, 17] = 0.66
    r[6, 19] = 1
    r[6, 21] = 0.66
    r[6, 20] = 0.3

    r[7,8] = 0.3
    r[7,9] = 0.3

    r[8, 7] = 0.3
    r[8, 20] = 0.3
    r[8, 22] = 0.66
    r[8, 24] = 1
    r[8, 23] = 0.66
    r[8, 9] = 0.3

    r[9, 7] = 0.3
    r[9, 8] = 0.3
    r[9, 20] = 0.66
    r[9, 22] = 1
    r[9, 24] = 0.66
    r[9, 23] = 0.3

    r[10, 11] = 0.3
    r[10, 12] = 0.5

    r[11, 10] = 0.3
    r[11, 23] = 0.3
    r[11, 25] = 0.66
    r[11, 28] = 1
    r[11, 26] = 0.66
    r[11, 13] = 0.3

    r[12,10] = 0.5
    r[12,13] = 0.66

    r[13, 12] = 0.6
    r[13, 11] = 0.3
    r[13, 23] = 0.66
    r[13, 25] = 1
    r[13, 28] = 0.66
    r[13, 26] = 0.3

    r[14, 15] = 0.5
    r[14, 3] = 0.3
    r[14, 2] = 0.66
    r[14, 17] = 1
    r[14, 18] = 0.66
    r[14, 16] = 0.3

    r[15, 14] = 0.5
    r[15, 16] = 0.15

    r[16, 15] = 0.15
    r[16, 14] = 0.3
    r[16, 3] = 0.66
    r[16, 2] = 1
    r[16, 17] = 0.66
    r[16, 18] = 0.3

    r[17, 2] = 0.3
    r[17, 3] = 0.66
    r[17, 14] = 1
    r[17, 16] = 0.66
    r[17, 18] = 0.3
    r[17, 5] = 0.3
    r[17, 6] = 0.66
    r[17, 20] = 1
    r[17, 21] = 0.66
    r[17, 19] = 0.3

    r[18, 16] = 0.3
    r[18, 14] = 0.66
    r[18, 3] = 1
    r[18, 2] = 0.66
    r[18, 17] = 0.3
    r[18, 19] = 0.3
    r[18, 33] = 0.66
    r[18, 34] = 1
    r[18, 31] = 0.66
    r[18, 29] = 0.3

    r[19, 17] = 0.3
    r[19, 5] = 0.66
    r[19, 6] = 1
    r[19, 20] = 0.66
    r[19, 21] = 0.3
    r[19, 18] = 0.3
    r[19, 29] = 0.66
    r[19, 31] = 1
    r[19, 34] = 0.66
    r[19, 33] = 0.3

    r[20, 6] = 0.3
    r[20, 5] = 0.66
    r[20, 17] = 1
    r[20, 19] = 0.66
    r[20, 21] = 0.3
    r[20, 8] = 0.3
    r[20, 9] = 0.66
    r[20, 23] = 1
    r[20, 24] = 0.66
    r[20, 22] = 0.3

    r[21, 20] = 0.3
    r[21, 6] = 0.66
    r[21, 5] = 1
    r[21, 17] = 0.66
    r[21, 19] = 0.3
    r[21, 22] = 0.3
    r[21, 36] = 0.66
    r[21, 37] = 1
    r[21, 35] = 0.66
    r[21, 33] = 0.3

    r[22, 20] = 0.3
    r[22, 8] = 0.66
    r[22, 9] = 1
    r[22, 23] = 0.66
    r[22, 24] = 0.3
    r[22, 21] = 0.3
    r[22, 33] = 0.66
    r[22, 35] = 1
    r[22, 37] = 0.66
    r[22, 36] = 0.3

    r[23, 9] = 0.3
    r[23, 8] = 0.66
    r[23, 20] = 1
    r[23, 22] = 0.66
    r[23, 24] = 0.3
    r[23, 11] = 0.3
    r[23, 13] = 0.66
    r[23, 26] = 1
    r[23, 28] = 0.66
    r[23, 25] = 0.3

    r[24, 23] = 0.3
    r[24, 9] = 0.66
    r[24, 8] = 1
    r[24, 20] = 0.66
    r[24, 22] = 0.3
    r[24, 25] = 0.3
    r[24, 39] = 0.66
    r[24, 40] = 1
    r[24, 38] = 0.66
    r[24, 36] = 0.3

    r[25, 24] = 0.3
    r[25, 36] = 0.66
    r[25, 38] = 1
    r[25, 40] = 0.66
    r[25, 39] = 0.3
    r[25, 23] = 0.3
    r[25, 11] = 0.66
    r[25, 13] = 1
    r[25, 26] = 0.66
    r[25, 28] = 0.3

    r[26, 27] = 0.5
    r[26, 13] = 0.3
    r[26, 11] = 0.66
    r[26, 23] = 1
    r[26, 25] = 0.66
    r[26, 28] = 0.3

    r[27, 26] = 0.5
    r[27, 28] = 0.15

    r[28, 27] = 0.15
    r[28, 26] = 0.3
    r[28, 13] = 0.66
    r[28, 11] = 1
    r[28, 23] = 0.66
    r[28, 25] = 0.3

    r[29, 30] = 0.5
    r[29, 18] = 0.3
    r[29, 19] = 0.66
    r[29, 33] = 1
    r[29, 34] = 0.66
    r[29, 31] = 0.3

    r[30, 29] = 0.5
    r[30, 32] = 0.66

    r[31, 29] = 0.3
    r[31, 18] = 0.66
    r[31, 19] = 1
    r[31, 33] = 0.66
    r[31, 34] = 0.3
    r[31, 32] = 0.3
    r[31, 43] = 0.66
    r[31, 45] = 1
    r[31, 47] = 0.66
    r[31, 46] = 0.3

    r[32, 30] = 0.66
    r[32, 31] = 0.3
    r[32, 46] = 0.66
    r[32, 47] = 1
    r[32, 45] = 0.66
    r[32, 43] = 0.3

    r[33, 34] = 0.3
    r[33, 31] = 0.66
    r[33, 29] = 1
    r[33, 18] = 0.66
    r[33, 19] = 0.3
    r[33, 35] = 0.3
    r[33, 37] = 0.66
    r[33, 36] = 1
    r[33, 22] = 0.66
    r[33, 28] = 0.3

    r[34, 31] = 0.3
    r[34, 29] = 0.66
    r[34, 18] = 1
    r[34, 19] = 0.66
    r[34, 33] = 0.3
    r[34, 35] = 0.3
    r[34, 49] = 0.66
    r[34, 50] = 1
    r[34, 48] = 0.66
    r[34, 46] = 0.3

    r[35, 33] = 0.3
    r[35, 21] = 0.66
    r[35, 22] = 1
    r[35, 36] = 0.66
    r[35, 37] = 0.3
    r[35, 34] = 0.3
    r[35, 46] = 0.66
    r[35, 48] = 1
    r[35, 50] = 0.66
    r[35, 49] = 0.3

    r[36, 22] = 0.3
    r[36, 21] = 0.66
    r[36, 33] = 1
    r[36, 35] = 0.66
    r[36, 37] = 0.3
    r[36, 38] = 0.3
    r[36, 40] = 0.66
    r[36, 39] = 1
    r[36, 25] = 0.66
    r[36, 24] = 0.3

    r[37, 35] = 0.3
    r[37, 33] = 0.66
    r[37, 21] = 1
    r[37, 22] = 0.66
    r[37, 36] = 0.3
    r[37, 38] = 0.3
    r[37, 52] = 0.66
    r[37, 53] = 1
    r[37, 51] = 0.66
    r[37, 49] = 0.3

    r[38, 36] = 0.3
    r[38, 24] = 0.66
    r[38, 25] = 1
    r[38, 39] = 0.66
    r[38, 40] = 0.3
    r[38, 52] = 0.3
    r[38, 53] = 0.66
    r[38, 51] = 1
    r[38, 49] = 0.66
    r[38, 37] = 0.3

    r[39, 25] = 0.3
    r[39, 24] = 0.66
    r[39, 36] = 1
    r[39, 38] = 0.66
    r[39, 40] = 0.3
    r[39, 41] = 0.5

    r[40, 38] = 0.3
    r[40, 36] = 0.66
    r[40, 24] = 1
    r[40, 25] = 0.66
    r[40, 39] = 0.3
    r[40, 42] = 0.3
    r[40, 55] = 0.66
    r[40, 57] = 1
    r[40, 54] = 0.66
    r[40, 52] = 0.3

    r[41, 39] = 0.5
    r[41, 42] = 0.66

    r[42, 40] = 0.3
    r[42, 52] = 0.66
    r[42, 54] = 1
    r[42, 57] = 0.66
    r[42, 55] = 0.3
    r[42, 41] = 0.66

    r[43, 44] = 0.5
    r[43, 32] = 0.3
    r[43, 31] = 0.66
    r[43, 46] = 1
    r[43, 47] = 0.66
    r[43, 45] = 0.3

    r[44, 43] = 0.5
    r[44, 45] = 0.15

    r[45, 44] = 0.15
    r[45, 43] = 0.3
    r[45, 32] = 0.66
    r[45, 31] = 1
    r[45, 46] = 0.66
    r[45, 47] = 0.3

    r[46, 31] = 0.3
    r[46, 32] = 0.66
    r[46, 43] = 1
    r[46, 45] = 0.66
    r[46, 47] = 0.3
    r[46, 34] = 0.3
    r[46, 35] = 0.66
    r[46, 49] = 1
    r[46, 50] = 0.66
    r[46, 48] = 0.3

    r[47, 45] = 0.3
    r[47, 43] = 0.66
    r[47, 32] = 1
    r[47, 31] = 0.66
    r[47, 46] = 0.3
    r[47, 48] = 0.3

    r[48, 46] = 0.3
    r[48, 34] = 0.66
    r[48, 35] = 1
    r[48, 49] = 0.66
    r[48, 50] = 0.3
    r[48, 47] = 0.3

    r[49, 35] = 0.3
    r[49, 34] = 0.66
    r[49, 46] = 1
    r[49, 48] = 0.66
    r[49, 50] = 0.3
    r[49, 37] = 0.3
    r[49, 38] = 0.66
    r[49, 52] = 1
    r[49, 53] = 0.66
    r[49, 51] = 0.3

    r[50,51] = 0.3
    r[50, 48] = 0.3
    r[50, 46] = 0.66
    r[50, 34] = 1
    r[50, 35] = 0.66
    r[50, 49] = 0.3

    r[51, 50] = 0.3
    r[51, 49] = 0.3
    r[51, 37] = 0.66
    r[51, 38] = 1
    r[51, 52] = 0.66
    r[51, 53] = 0.3

    r[52, 38] = 0.3
    r[52, 37] = 0.66
    r[52, 49] = 1
    r[52, 51] = 0.66
    r[52, 53] = 0.3
    r[52, 40] = 0.3
    r[52, 42] = 0.66
    r[52, 55] = 1
    r[52, 57] = 0.66
    r[52, 54] = 0.3

    r[53, 54] = 0.3
    r[53, 51] = 0.3
    r[53, 49] = 0.66
    r[53, 37] = 1
    r[53, 38] = 0.66
    r[53, 52] = 0.3

    r[54, 53] = 0.3
    r[54, 52] = 0.3
    r[54, 40] = 0.66
    r[54, 42] = 1
    r[54, 55] = 0.66
    r[54, 57] = 0.3

    r[55, 56] = 0.5
    r[55, 57] = 0.3
    r[55, 54] = 0.66
    r[55, 52] = 1
    r[55, 40] = 0.66
    r[55, 42] = 0.3

    r[56, 55] = 0.5
    r[56, 57] = 0.15

    r[57, 56] = 0.15
    r[57, 54] = 0.3
    r[57, 52] = 0.66
    r[57, 40] = 1
    r[57, 42] = 0.66
    r[57, 55] = 0.3

    return r


# 左-1右1，上-1下1
def LAR_cube_triangle():
    r = np.ones((58, 58), dtype=np.float32)

    r[0, 1] = 1
    r[0, 2] = -1

    r[1, 0] = -1
    r[1, 3] = 1

    r[2, 0] = -1
    r[2, 3] = 1
    r[2, 14] = 1
    r[2, 16] = 1
    r[2, 18] = 1
    r[2, 17] = 1

    r[3, 1] = -1
    r[3, 2] = 1
    r[3, 17] = 1
    r[3, 18] = 1
    r[3, 16] = 1
    r[3, 14] = 1

    r[4, 5] = 1
    r[4, 6] = -1

    r[5, 4] = -1
    r[5, 6] = 1
    r[5, 20] = 1
    r[5, 21] = 1
    r[5, 19] = 1
    r[5, 17] = 1

    r[6, 4] = -1
    r[6, 5] = 1
    r[6, 17] = 1
    r[6, 19] = 1
    r[6, 21] = 1
    r[6, 20] = 1

    r[7,8] = -1
    r[7,9] = 1

    r[8, 7] = -1
    r[8, 20] = 1
    r[8, 22] = 1
    r[8, 24] = 1
    r[8, 23] = 1
    r[8, 9] = 1

    r[9, 7] = -1
    r[9, 8] = 1
    r[9, 20] = 1
    r[9, 22] = 1
    r[9, 24] = 1
    r[9, 23] = 1

    r[10, 11] = -1
    r[10, 12] = 1

    r[11, 10] = -1
    r[11, 23] = 1
    r[11, 25] = 1
    r[11, 28] = 1
    r[11, 26] = 1
    r[11, 13] = 1

    r[12,10] = -1
    r[12,13] = 1

    r[13, 12] = -1
    r[13, 11] = 1
    r[13, 23] = 1
    r[13, 25] = 1
    r[13, 28] = 1
    r[13, 26] = 1

    r[14, 15] = -1
    r[14, 3] = 1
    r[14, 2] = 1
    r[14, 17] = 1
    r[14, 18] = 1
    r[14, 16] = 1

    r[15, 14] = -1
    r[15, 16] = 1

    r[16, 15] = -1
    r[16, 14] = 1
    r[16, 3] = 1
    r[16, 2] = 1
    r[16, 17] = 1
    r[16, 18] = 1

    r[17, 2] = -1
    r[17, 3] = -1
    r[17, 14] = -1
    r[17, 16] = -1
    r[17, 18] = -1
    r[17, 5] = 1
    r[17, 6] = 1
    r[17, 20] = 1
    r[17, 21] = 1
    r[17, 19] = 1

    r[18, 16] = -1
    r[18, 14] = -1
    r[18, 3] = -1
    r[18, 2] = -1
    r[18, 17] = -1
    r[18, 19] = 1
    r[18, 33] = 1
    r[18, 34] = 1
    r[18, 31] = 1
    r[18, 29] = 1

    r[19, 17] = -1
    r[19, 5] = -1
    r[19, 6] = -1
    r[19, 20] = -1
    r[19, 21] = -1
    r[19, 18] = 1
    r[19, 29] = 1
    r[19, 31] = 1
    r[19, 34] = 1
    r[19, 33] = 1

    r[20, 6] = -1
    r[20, 5] = -1
    r[20, 17] = -1
    r[20, 19] = -1
    r[20, 21] = -1
    r[20, 8] = 1
    r[20, 9] = 1
    r[20, 23] = 1
    r[20, 24] = 1
    r[20, 22] = 1

    r[21, 20] = -1
    r[21, 6] = -1
    r[21, 5] = -1
    r[21, 17] = -1
    r[21, 19] = -1
    r[21, 22] = 1
    r[21, 36] = 1
    r[21, 37] = 1
    r[21, 35] = 1
    r[21, 33] = 1

    r[22, 20] = -1
    r[22, 8] = -1
    r[22, 9] = -1
    r[22, 23] = -1
    r[22, 24] = -1
    r[22, 21] = 1
    r[22, 33] = 1
    r[22, 35] = 1
    r[22, 37] = 1
    r[22, 36] = 1

    r[23, 9] = -1
    r[23, 8] = -1
    r[23, 20] = -1
    r[23, 22] = -1
    r[23, 24] = -1
    r[23, 11] = 1
    r[23, 13] = 1
    r[23, 26] = 1
    r[23, 28] = 1
    r[23, 25] = 1

    r[24, 23] = -1
    r[24, 9] = -1
    r[24, 8] = -1
    r[24, 20] = -1
    r[24, 22] = -1
    r[24, 25] = 1
    r[24, 39] = 1
    r[24, 40] = 1
    r[24, 38] = 1
    r[24, 36] = 1

    r[25, 24] = -1
    r[25, 36] = -1
    r[25, 38] = -1
    r[25, 40] = -1
    r[25, 39] = -1
    r[25, 23] = 1
    r[25, 11] = 1
    r[25, 13] = 1
    r[25, 26] = 1
    r[25, 28] = 1

    r[26, 27] = -1
    r[26, 13] = 1
    r[26, 11] = 1
    r[26, 23] = 1
    r[26, 25] = 1
    r[26, 28] = 1

    r[27, 26] = -1
    r[27, 28] = 1

    r[28, 27] = -1
    r[28, 26] = 1
    r[28, 13] = 1
    r[28, 11] = 1
    r[28, 23] = 1
    r[28, 25] = 1

    r[29, 30] = -1
    r[29, 18] = 1
    r[29, 19] = 1
    r[29, 33] = 1
    r[29, 34] = 1
    r[29, 31] = 1

    r[30, 29] = -1
    r[30, 32] = 1

    r[31, 29] = -1
    r[31, 18] = -1
    r[31, 19] = -1
    r[31, 33] = -1
    r[31, 34] = -1
    r[31, 32] = 1
    r[31, 43] = 1
    r[31, 45] = 1
    r[31, 47] = 1
    r[31, 46] = 1

    r[32, 30] = -1
    r[32, 31] = 1
    r[32, 46] = 1
    r[32, 47] = 1
    r[32, 45] = 1
    r[32, 43] = 1

    r[33, 34] = -1
    r[33, 31] = -1
    r[33, 29] = -1
    r[33, 18] = -1
    r[33, 19] = -1
    r[33, 35] = 1
    r[33, 37] = 1
    r[33, 36] = 1
    r[33, 22] = 1
    r[33, 28] = 1

    r[34, 31] = -1
    r[34, 29] = -1
    r[34, 18] = -1
    r[34, 19] = -1
    r[34, 33] = -1
    r[34, 35] = 1
    r[34, 49] = 1
    r[34, 50] = 1
    r[34, 48] = 1
    r[34, 46] = 1

    r[35, 33] = -1
    r[35, 21] = -1
    r[35, 22] = -1
    r[35, 36] = -1
    r[35, 37] = -1
    r[35, 34] = 1
    r[35, 46] = 1
    r[35, 48] = 1
    r[35, 50] = 1
    r[35, 49] = 1

    r[36, 22] = -1
    r[36, 21] = -1
    r[36, 33] = -1
    r[36, 35] = -1
    r[36, 37] = -1
    r[36, 38] = 1
    r[36, 40] = 1
    r[36, 39] = 1
    r[36, 25] = 1
    r[36, 24] = 1

    r[37, 35] = -1
    r[37, 33] = -1
    r[37, 21] = -1
    r[37, 22] = -1
    r[37, 36] = -1
    r[37, 38] = 1
    r[37, 52] = 1
    r[37, 53] = 1
    r[37, 51] = 1
    r[37, 49] = 1

    r[38, 36] = -1
    r[38, 24] = -1
    r[38, 25] = -1
    r[38, 39] = -1
    r[38, 40] = -1
    r[38, 52] = 1
    r[38, 53] = 1
    r[38, 51] = 1
    r[38, 49] = 1
    r[38, 37] = 1

    r[39, 41] = -1
    r[39, 25] = 1
    r[39, 24] = 1
    r[39, 36] = 1
    r[39, 38] = 1
    r[39, 40] = 1

    r[40, 38] = -1
    r[40, 36] = -1
    r[40, 24] = -1
    r[40, 25] = -1
    r[40, 39] = -1
    r[40, 42] = 1
    r[40, 55] = 1
    r[40, 57] = 1
    r[40, 54] = 1
    r[40, 52] = 1

    r[41, 39] = -1
    r[41, 42] = 1

    r[42, 41] = -1
    r[42, 40] = 1
    r[42, 52] = 1
    r[42, 54] = 1
    r[42, 57] = 1
    r[42, 55] = 1

    r[43, 44] = -1
    r[43, 32] = 1
    r[43, 31] = 1
    r[43, 46] = 1
    r[43, 47] = 1
    r[43, 45] = 1

    r[44, 43] = -1
    r[44, 45] = 1

    r[45, 44] = -1
    r[45, 43] = 1
    r[45, 32] = 1
    r[45, 31] = 1
    r[45, 46] = 1
    r[45, 47] = 1

    r[46, 31] = -1
    r[46, 32] = -1
    r[46, 43] = -1
    r[46, 45] = -1
    r[46, 47] = -1
    r[46, 34] = 1
    r[46, 35] = 1
    r[46, 49] = 1
    r[46, 50] = 1
    r[46, 48] = 1

    r[47, 48] = -1
    r[47, 45] = 1
    r[47, 43] = 1
    r[47, 32] = 1
    r[47, 31] = 1
    r[47, 46] = 1

    r[48, 47] = -1
    r[48, 46] = 1
    r[48, 34] = 1
    r[48, 35] = 1
    r[48, 49] = 1
    r[48, 50] = 1

    r[49, 35] = -1
    r[49, 34] = -1
    r[49, 46] = -1
    r[49, 48] = -1
    r[49, 50] = -1
    r[49, 37] = 1
    r[49, 38] = 1
    r[49, 52] = 1
    r[49, 53] = 1
    r[49, 51] = 1

    r[50, 51] = -1
    r[50, 48] = 1
    r[50, 46] = 1
    r[50, 34] = 1
    r[50, 35] = 1
    r[50, 49] = 1

    r[51, 50] = -1
    r[51, 49] = 1
    r[51, 37] = 1
    r[51, 38] = 1
    r[51, 52] = 1
    r[51, 53] = 1

    r[52, 38] = -1
    r[52, 37] = -1
    r[52, 49] = -1
    r[52, 51] = -1
    r[52, 53] = -1
    r[52, 40] = 1
    r[52, 42] = 1
    r[52, 55] = 1
    r[52, 57] = 1
    r[52, 54] = 1

    r[53, 54] = -1
    r[53, 51] = 1
    r[53, 49] = 1
    r[53, 37] = 1
    r[53, 38] = 1
    r[53, 52] = 1

    r[54, 53] = -1
    r[54, 52] = 1
    r[54, 40] = 1
    r[54, 42] = 1
    r[54, 55] = 1
    r[54, 57] = 1

    r[55, 56] = -1
    r[55, 57] = 1
    r[55, 54] = 1
    r[55, 52] = 1
    r[55, 40] = 1
    r[55, 42] = 1

    r[56, 55] = -1
    r[56, 57] = 1

    r[57, 56] = -1
    r[57, 54] = 1
    r[57, 52] = 1
    r[57, 40] = 1
    r[57, 42] = 1
    r[57, 55] = 1

    return r


def test_map():
    r = np.ones((7, 7), dtype=np.float32)
    r = r * (-1)

    r[0,1] = 0.3
    r[0,2] = 0.3

    r[1,0] = 0.3
    r[1,2] = 0.3
    r[1,3] = 0.66

    r[2,0] = 0.3
    r[2,1] = 0.3
    r[2,3] = 1

    r[3,1] = 0.6
    r[3,2] = 1
    r[3,4] = 0.6
    r[3,6] = 1

    r[4,5] = 0.3
    r[4,6] = 0.3
    r[4,3] = 0.66

    r[5,4] = 0.3
    r[5,6] = 0.3

    r[6,4] = 0.3
    r[6,5] = 0.3
    r[6,3] = 1

    return r


def LAR_test_map():
    r = np.ones((7, 7), dtype=np.float32)

    r[0, 1] = -1
    r[0, 2] = 1

    r[1, 0] = -1
    r[1, 2] = 1
    r[1, 3] = 1

    r[2, 0] = -1
    r[2, 1] = 1
    r[2, 3] = 1

    r[3, 1] = -1
    r[3, 2] = -1
    r[3, 4] = 1
    r[3, 6] = 1

    r[4, 5] = -1
    r[4, 6] = 1
    r[4, 3] = 1

    r[5, 4] = -1
    r[5, 6] = 1

    r[6, 4] = 1
    r[6, 5] = -1
    r[6, 3] = 1

    return r

#  训练过程
def Qlearning(r):

    digit = r.shape[0]

    q = np.zeros([digit, digit], dtype=np.float32)

    gamma = 0.8

    for step in range(1000):
        state = random.randint(0, digit-1)
        #state = 0
        for j in range(digit):
            next_state_list = []
            for i in range(digit):
                if r[state, i] != -1:
                    next_state_list.append(i)
            next_state = next_state_list[random.randint(0, len(next_state_list) - 1)]
            q[state, next_state] = r[state, next_state] + gamma * max(q[next_state])  # 注意qval是一个数值
            state = next_state

    return q


#升级了学习方法
def Qlearning1(start, r, r_v2):

    epsilon = 0.9  # 贪婪度 greedy
    alpha = 0.1  # 学习率
    gamma = 0.8  # 奖励递减值

    digit = r.shape[0]
    q = np.zeros([digit, digit], dtype=np.float32)

    for i in range(10000):  # 一直学习直到Q矩阵收敛
        #current_state = random.choice(range(digit))
        current_state = start

        next_state_list = []  # 走第一步，有值即可
        for action in range(digit):
            if r[current_state, action] != -1:
                next_state_list.append(action)

        if (random.uniform(0, 1) > epsilon) or ((q[current_state] == 0).all()):
            next_state = random.choice(next_state_list)
        else:
            next_state = findIndex(q[current_state].max(), q[current_state])

        q[current_state, next_state] = (1 - alpha) * q[current_state, next_state] + alpha * (
                r[current_state, next_state] + gamma * q[next_state].max())

        pre_state = current_state
        current_state = next_state

        print("the robot goes to " + str(pre_state) + "in"+str(i))
        print("the robot goes to " + str(current_state) + "in"+str(i))

        for j in range(digit-2):  # 总共就走digit步

            next_state_list = []  # 取合法的下一步，两个判断条件:非-1且不同侧
            for action in range(digit):
                #if r[current_state, action] != -1:
                if r[current_state, action] != -1 and r_v2[current_state, action] != r_v2[current_state, pre_state]:
                    next_state_list.append(action)

            if (random.uniform(0, 1) > epsilon) or ((q[current_state] == 0).all()):  # 探索
                #current_action = random.choice(get_valid_actions(current_state))
                next_state = random.choice(next_state_list)  #验证
            else:
                #current_action = q.ix[current_state].idxmax()  # 利用（贪婪）
                next_state = findIndex(q[current_state].max(),q[current_state])#验证

            #next_state = get_next_state(current_state, current_action)

            #next_state_q_values = q.ix[next_state, get_valid_actions(next_state)]

            #q[current_state, next_state] += alpha * (
                    #r[current_state,next_state] + gamma * q[next_state].max() - q[current_state, next_state])

            q[current_state, next_state] = (1-alpha) * q[current_state, next_state] + alpha * (
                    r[current_state, next_state] + gamma * q[next_state].max())

            current_state = next_state
            print("the robot goes to " + str(next_state) + "in" + str(i))

    return q


#  找到值在表中的序数,其实就是对应的动作，从0开始的
def findIndex(value, list):
    for i in range(len(list)):
        if value == list[i]:
            return i
    return False


#  以起点为start的一条路径
def findPath(start, q, r_v2):
    #r_v2 = LAR_initiaR3()

    linenum = q.shape[0]

    print("robot start at {}".format(start))

    q_max = q[start].max()  # 状态state这一行里的最大值，即回报最大的动作的回报值
    q_max_action = []

    for action in range(linenum):  # 找回报最大的动作的下标（编号）
        if q[start, action] == q_max:
            q_max_action.append(action)

    q[start] = 0
    q[:, start] = 0
    state = q_max_action[0]
    prevstate = start
    print("the robot goes to " + str(state) + '.')

    while q.any():

        for action in range(linenum):  # 删除掉同一方向的边
            if r_v2[state,action] == r_v2[state,prevstate]:
                q[state,action] = 0

        if not q[state].any():  # 如果此state全是0,就遍历找一个不全是0的state,肯定能找到
            for new_state in range(linenum):
                if not q[new_state].any():
                    continue
                print("from {} jump to {}".format(state, new_state))
                state = new_state
                break

        # q_max = q[state].max()  # 状态state这一行里的最大值，即回报最大的动作的回报值
        next_state = findIndex(q[state].max(), q[state])
       # q_max_action = []
        '''
        for action in range(linenum):  # 找回报最大的动作的下标
            if q[state, action] == q_max:
                # q_max_action.append(action)
                next_state = action
                break
        '''
        # next_state = q_max_action[random.randint(0, len(q_max_action) - 1)]   # 在若干个最大回报的动作中随机取
        # next_state = q_max_action[0]
        print("the robot goes to " + str(next_state) + '.')


        #...............................去掉回头路...................................
        # for next in range(linenum):
        #         #     if q[state,next] != 0:
        #         #         q[next_state,next] = 0
        q[state] = 0  # 和点不一样的地方，边只能经过一次
        q[:,state] = 0

        prevstate = state
        state = next_state


#  起点start的路径有多少次跳转
def find_num_Path(start, q):
    jumpnum = 0
    linenum = q.shape[0]
    # r_v2 = LAR_initiaR3()
    r_v2 = LAR_cube_triangle()

    q_max = q[start].max()  # 状态state这一行里的最大值，即回报最大的动作的回报值
    #q_max_action = []
    for action in range(linenum):  # 找回报最大的动作的下标,即边编号
        if q[start, action] == q_max:
            # q_max_action.append(action)
            state = action

    q[start] = 0
    q[:, start] = 0
    prevstate = start

    while q.any():

        if not q[state].any():  # 如果此state全是0,就遍历找一个不全是0的state,肯定能找到
            for new_state in range(linenum):
                if not q[new_state].any():
                    continue
                #print("from {} jump to {}".format(state, new_state))
                state = new_state
                jumpnum += 1  #  和findpath函数主要就是这句话有区别
                break

        L_or_R = r_v2[state,prevstate] # 得到上一边是哪个方向
        for action in range(linenum):  # 删除掉同一方向的边
            if r_v2[state,action] == L_or_R:
                q[state,action] = 0

        q_max = q[state].max()  # 状态state这一行里的最大值，即回报最大的动作的回报值
        #q_max_action = []
        for action in range(linenum):  # 找回报最大的动作的下标
            if q[state, action] == q_max:
                #q_max_action.append(action)
                next_state = action

        #next_state = q_max_action[random.randint(0, len(q_max_action) - 1)]
        #next_state = q_max_action[0]
        #print("the robot goes to " + str(next_state) + '.')
        #q[state, next_state] = 0
        #q[next_state, state] = 0

        #。。。。。。。。。。。。。。。。去掉回头路
        # for next in range(linenum):
        #     if q[state,next] != 0:
        #         q[next_state,next] = 0
        q[state] = 0  # 和点不一样的地方，边只能经过一次
        q[:,state] = 0

        prevstate = state
        state = next_state
    return jumpnum


def main():
    print(".......................learning..........................")
    start = 1 # 指定起点
    #r = initiaR3()
    #r = cube_triangle()
    r = test_map()
    #r_v2 = LAR_cube_triangle()
    r_v2 = LAR_test_map()
    print(r)

    #start = time.clock()
    q = Qlearning(r)
    #q = Qlearning1(start, r, r_v2)
    #end = time.clock()
    print(q)
    #print('Learning time:%s Seconds'%(end-start))

    #print("...................寻找路径.......................")
    # for i in range(5):
    #     start = random.randint(0, 41)
    #     print("it's ",i+1,"st path,start with",start)
    #     q1 = q.copy()
    #     findPath(start, q1)
    #     print("....................................................")
#  想法：训练好现有的Q，每一个点都走一遍，然后在选一个最优的
    print(".................display best path.......................")
    q1 = q.copy()
    findPath(start, q1, r_v2)

'''
    jumptimes = []
    print(".................finding best path.......................")

    for i in range(r.shape[0]):
        q1 = q.copy()
        jumptimes.append(find_num_Path(i, q1))

    #start = findIndex(min(jumptimes), jumptimes)
    
    print(jumptimes)
'''


if __name__ == "__main__":  # 整个程序的入口
    main()