# -*- codeing = utf-8 -*-
# @Time : 2020/4/8 15:58
# @Author : liuyi
# @File : test3.py
# @Software : PyCharm

# 检查R矩阵是否正确
import numpy as np

r = np.array([[-1, -0, -1, -1, -1, -1, -0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
               -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
              [-0, -1, -0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
               -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
              [-1, -0, -1, -1, -1, -1, -1, -1, -0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
               -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -0, -1, -1, -1, -1, -0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
               -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
              [-1, -1, -1, -0, -1, -0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
               -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -0, -1, -1, -1, -1, -1, -1, -0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
               -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
              [-0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
               -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1, -1, -1, -1, -0, -1, -1, -1, -1, -0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
               -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
              [-1, -1, -0, -1, -1, -1, -1, -0, -1, -0, -1, -1, -1, -1, -0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
               -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
              [-1, -1, -1, -0, -1, -1, -1, -1, -0, -1, -0, -1, -1, -1, -1, -0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
               -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1, -1, -1, -1, -1, -0, -1, -1, -1, -1, -1, -1, -0, -1, -1, -1, -1, -1, -1, -1, -1, -1,
               -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1, -0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -0, -1, -1, -1, -1, -1, -1, -1, -1,
               -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1, -1, -0, -1, -1, -1, -1, -1, -1, -0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
               -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1, -1, -1, -0, -1, -1, -1, -1, -0, -1, -0, -1, -1, -1, -1, -0, -1, -1, -1, -1, -1, -1,
               -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1, -1, -1, -1, -0, -1, -1, -1, -1, -0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
               -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1, -1, -1, -1, -1, -0, -1, -1, -1, -1, -1, -1, -0, -1, -1, -1, -1, -1, -1, -1, -1, -1,
               -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -0, -1, -1, -1, -1, -0, -1, -0, -1, -1, -1, -1, -0, -1, -1, -1,
               -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -0, -1, -1, -1, -1, -0, -1, -1, -1, -1, -1, -1, -1, -1, -1,
               -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -0, -1, -1, -1, -1, -0, -1,
               -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -0, -1, -1, -1, -1, -0, -1, -0, -1, -1, -1, -1, -0,
               -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -0, -1, -1, -1, -1, -1, -1,
               -0, -1, -1, -1, -1, -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -0, -1, -1, -1,
               -1, -0, -1, -1, -1, -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -0, -1, -1, -1, -1, -0, -1, -0, -1, -1,
               -1, -1, -0, -1, -1, -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -0, -1, -1, -1,
               -1, -1, -1, -0, -1, -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -0, -1, -1, -1, -1, -1, -1, -1,
               -1, -1, -1, -1, -0, -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -0, -1, -1, -1, -1, -1, -1,
               -0, -1, -1, -1, -1, -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -0, -1, -1, -1, -1, -0,
               -1, -0, -1, -1, -1, -1, -0, -1, -1, -1],
              [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -0, -1, -1, -1, -1,
               -0, -1, -0, -1, -1, -1, -1, -0, -1, -1],
              [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -0, -1, -1, -1,
               -1, -0, -1, -1, -1, -1, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -0, -1, -1,
               -1, -1, -1, -1, -1, -1, -1, -1, -1, -0],
              [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -0, -1,
               -1, -1, -1, -1, -1, -0, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
               -1, -1, -1, -1, -0, -1, -0, -1, -1, -1],
              [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
               -0, -1, -1, -1, -1, -0, -1, -1, -1, -1],
              [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
               -1, -0, -1, -1, -1, -1, -1, -1, -0, -1],
              [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
               -1, -1, -1, -1, -1, -1, -1, -0, -1, -0],
              [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
               -1, -1, -1, -0, -1, -1, -1, -1, -0, -1],
              #               0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35

              ])

for i in range(36):
    for j in range(36):
        if i == j and i == -1:
            pass
        elif r[i, j] != -1 and r[j, i] != -1:
            pass
        elif r[i, j] == -1 and r[j, i] == -1:
            pass
        else:
            print("wrong at [{},{}]".format(i, j))

count = 0
r += 1


# print(r)


def R():
    count = 0
    for i in range(36):
        for j in range(36):
            if r[i, j]:
                r[i, j] = 0
                r[j, i] = 0
                count += 1
    # print(count)


q = np.ones((44, 44), dtype=np.int16)
q = q * (-1)
q[0, 1] = 0
q[0, 4] = 0
q[1, 0] = 0
q[1, 5] = 0
q[2, 3] = 0
q[2, 6] = 0
q[3, 2] = 0
q[3, 7] = 0
q[4, 0] = 0
q[4, 11] = 0
q[5, 1] = 0
q[5, 8] = 0
q[5, 9] = 0
q[5, 13] = 0
q[6, 2] = 0
q[6, 9] = 0
q[6, 10] = 0
q[6, 14] = 0
q[7, 3] = 0
q[7, 16] = 0
q[8, 5] = 0
q[8, 9] = 0
q[8, 12] = 0
q[8, 13] = 0

q[9, 5] = 0
q[9, 6] = 0
q[9, 8] = 0
q[9, 10] = 0
q[9, 13] = 0
q[9, 14] = 0

q[10, 6] = 0
q[10, 9] = 0
q[10, 14] = 0
q[10, 15] = 0
q[11, 4] = 0
q[11, 17] = 0
q[12, 8] = 0
q[12, 17] = 0
q[12, 18] = 0
q[12, 21] = 0
q[13, 5] = 0
q[13, 8] = 0
q[13, 9] = 0
q[13, 18] = 0
q[14, 6] = 0
q[14, 9] = 0
q[14, 10] = 0
q[14, 19] = 0
q[15, 10] = 0
q[15, 19] = 0
q[15, 20] = 0
q[15, 22] = 0
q[16, 7] = 0
q[16, 20] = 0
q[17, 11] = 0
q[17, 12] = 0
q[17, 18] = 0
q[17, 21] = 0
q[18, 12] = 0
q[18, 13] = 0
q[18, 17] = 0
q[18, 21] = 0
q[19, 14] = 0
q[19, 15] = 0
q[19, 20] = 0
q[19, 22] = 0
q[20, 15] = 0
q[20, 16] = 0
q[20, 19] = 0
q[20, 22] = 0

q[21, 12] = 0
q[21, 17] = 0
q[21, 18] = 0
q[21, 23] = 0
q[21, 24] = 0
q[21, 28] = 0

q[22, 15] = 0
q[22, 19] = 0
q[22, 20] = 0
q[22, 25] = 0
q[22, 26] = 0
q[22, 31] = 0

q[23, 21] = 0
q[23, 24] = 0
q[23, 27] = 0
q[23, 28] = 0
q[24, 21] = 0
q[24, 23] = 0
q[24, 28] = 0
q[24, 29] = 0
q[25, 22] = 0
q[25, 26] = 0
q[25, 30] = 0
q[25, 31] = 0
q[26, 22] = 0
q[26, 25] = 0
q[26, 31] = 0
q[26, 32] = 0
q[27, 23] = 0
q[27, 36] = 0
q[28, 21] = 0
q[28, 23] = 0
q[28, 24] = 0
q[28, 33] = 0
q[29, 24] = 0
q[29, 33] = 0
q[29, 34] = 0
q[29, 37] = 0
q[30, 25] = 0
q[30, 34] = 0
q[30, 35] = 0
q[30, 38] = 0
q[31, 22] = 0
q[31, 25] = 0
q[31, 26] = 0
q[31, 35] = 0
q[32, 26] = 0
q[32, 39] = 0
q[33, 28] = 0
q[33, 29] = 0
q[33, 34] = 0
q[33, 37] = 0

q[34, 29] = 0
q[34, 30] = 0
q[34, 37] = 0
q[34, 30] = 0
q[34, 35] = 0
q[34, 38] = 0

q[35, 30] = 0
q[35, 31] = 0
q[35, 34] = 0
q[35, 38] = 0
q[36, 27] = 0
q[36, 40] = 0
q[37, 29] = 0
q[37, 33] = 0
q[37, 34] = 0
q[37, 41] = 0
q[38, 30] = 0
q[38, 34] = 0
q[38, 35] = 0
q[38, 42] = 0
q[39, 32] = 0
q[39, 43] = 0
q[40, 36] = 0
q[40, 41] = 0
q[41, 40] = 0
q[41, 37] = 0
q[42, 38] = 0
q[42, 43] = 0
q[43, 39] = 0
q[43, 42] = 0

# firststate = [8,9,13,16,19,22,26,27]
#
# def findIndex(value,list):
#     for i in range(len(list)):
#         if value == list[i]:
#             return i
#     return False
# print(findIndex(13,firststate))
q = np.ones((4, 4))


def changeme(q):
    # q[1,1] = 2
    # q[2,2] = 2
    # for i in range(4):
    #     for j in range(4):
    #         q[i, j] = 2
    q = q + 1
    print(q)



# print(q)
# changeme(q)
# print(q)
import random
for i in range(10):
    print(random.choice([8, 9, 13, 16, 19, 22, 26, 27]))